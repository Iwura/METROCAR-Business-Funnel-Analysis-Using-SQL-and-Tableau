--What steps of the funnel should we research and improve? Are there any specific drop-off points preventing users from completing their first ride?
User Level Granularity

WITH funnel_table AS (SELECT 1 AS funnel_step, 
	'App Download' AS funnel_name,
  COUNT(*) AS user_count
FROM app_downloads
union
SELECT 2 AS funnel_step,
	'Signups' AS funnel_name,
  COUNT(*) AS user_count
FROM signups
union 
SELECT 3 AS funnel_step,
	'Ride requests' AS funnel_name,
  COUNT(DISTINCT user_id) AS user_count
FROM ride_requests
union
SELECT 4 AS funnel_step,
	'Ride accepted' AS funnel_name,
  COUNT(DISTINCT user_id) AS user_count                    
FROM ride_requests
WHERE accept_ts IS NOT NULL
union 
SELECT 5 AS funnel_step,
	'Ride completed' AS funnel_name,
  COUNT(DISTINCT user_id) AS user_count
FROM ride_requests
WHERE dropoff_ts IS NOT NULL                      
union                      
SELECT 6 AS funnel_step, 
	'Payments' AS funnel_name,
  COUNT(DISTINCT r.user_id) AS user_count
FROM transactions AS t
  LEFT JOIN ride_requests AS r
  	ON t.ride_id = r.ride_id
WHERE t.charge_status = 'Approved'
union
SELECT 7 AS funnel_step,
	'Reviews' AS funnel_name,
  COUNT(DISTINCT user_id) AS user_count
FROM reviews)
SELECT *, 
	LAG(user_count, 1) OVER (ORDER BY funnel_step),  
  (LAG(user_count, 1) OVER (ORDER BY funnel_step) - user_count::FLOAT)/LAG(user_count, 1) OVER (ORDER BY funnel_step)  AS drop_off_rate,
  user_count::FLOAT/LAG(user_count, 1) OVER (ORDER BY funnel_step) AS conversion_rate
FROM funnel_table

Ride Level Granularity,
WITH funnel_table AS (SELECT 1 AS funnel_step, 
	'App Download' AS funnel_name,
  NULL::INTEGER AS ride_count
FROM app_downloads                 
union
SELECT 2 AS funnel_step,
	'Signups' AS funnel_name, 
  NULL::INTEGER AS ride_count
FROM signups                
union 
SELECT 3 AS funnel_step,
	'Ride requests' AS funnel_name,
  COUNT(ride_id) AS ride_count                    
FROM ride_requests 
union
SELECT 4 AS funnel_step,
	'Ride accepted' AS funnel_name,
  COUNT(ride_id) AS ride_count                    
FROM ride_requests 
WHERE accept_ts IS NOT NULL
union
SELECT 5 AS funnel_step,
	'Ride completed' AS funnel_name,
  COUNT(ride_id) AS ride_count                    
FROM ride_requests
WHERE dropoff_ts IS NOT NULL
union                      
SELECT 6 AS funnel_step, 
	'Payments' AS funnel_name,
  COUNT(ride_id) AS ride_count                    
FROM transactions
WHERE charge_status = 'Approved'                     
union
SELECT 7 AS funnel_step,
	'Reviews' AS funnel_name,
  COUNT(DISTINCT ride_id) AS ride_count                    
FROM reviews)
SELECT *, 
	LAG(ride_count, 1) OVER (ORDER BY funnel_step),  
  (LAG(ride_count, 1) OVER (ORDER BY funnel_step) - ride_count::FLOAT)/LAG(ride_count, 1) OVER (ORDER BY funnel_step)  AS drop_off_rate,
  ride_count::FLOAT/LAG(ride_count, 1) OVER (ORDER BY funnel_step) AS conversion_rate
FROM funnel_table

--Metrocar currently supports 3 different platforms: ios, android, and web. To recommend where to focus our marketing budget for the upcoming year, what insights can we make based on the platform?
SELECT platform, COUNT(*) AS number_of_requests, SUM(purchase_amount_usd)
FROM Transactions AS t
	JOIN ride_requests AS r
  ON t.ride_id = r.ride_id
	JOIN signups AS s
  	ON r.user_id = s.user_id
  JOIN app_downloads AS a
	  ON a.app_download_key = s.session_id
	GROUP BY 1

--What age groups perform best at each stage of our funnel? Which age group(s) likely contain our target customers?
To be answered in visualization.


--What part of our funnel has the lowest conversion rate? What can we do to improve this part of the funnel?
Same codes as first above.

--Surge pricing is the practice of increasing the price of goods or services when there is the greatest demand for them. If we want to adopt a price-surging strategy, what does the distribution of ride requests look like throughout the day?
SELECT CASE
	WHEN DATE_PART('HOUR', request_ts) >= 00 AND DATE_PART('HOUR', request_ts) <= 06 THEN 'Past midnight to 6am'
  WHEN DATE_PART('HOUR', request_ts) > 06 AND DATE_PART('HOUR', request_ts) <= 09 THEN 'Past 6am to 9am'
  WHEN DATE_PART('HOUR', request_ts) > 09 AND DATE_PART('HOUR', request_ts) <= 12 THEN 'Past 9am to 12noon'
  WHEN DATE_PART('HOUR', request_ts) > 12 AND DATE_PART('HOUR', request_ts) <= 15 THEN 'Past 12noon to 3pm'
  WHEN DATE_PART('HOUR', request_ts) > 15 AND DATE_PART('HOUR', request_ts) <= 18 THEN 'Past 3pm to 6pm'
  WHEN DATE_PART('HOUR', request_ts) > 18 AND DATE_PART('HOUR', request_ts) <= 21 THEN 'Past 6pm to 9pm'
  ELSE 'Past 9pm to 12midnight'
  END AS ride_time_category, COUNT(*) AS number_of_rides
FROM ride_requests
GROUP BY 1
ORDER BY 2 DESC;
--How many times was the app downloaded?
SELECT COUNT(*) AS number_of_downloads
FROM app_downloads

--How many users signed up on the app?
SELECT COUNT(*) AS number_of_signups
FROM signups

--How many rides were requested through the app?
SELECT COUNT(*) AS number_of_requests
FROM ride_requests

--How many rides were requested and completed through the app?
SELECT COUNT(*) AS number_of_requests
FROM ride_requests AS r
	JOIN transactions AS t
		ON r.ride_id = t.ride_id
--How many rides were requested and how many unique users requested a ride?

--How many unique rides were requested through the app?
SELECT COUNT (DISTINCT user_id) AS number_of_unique_requests
FROM ride_requests
SELECT AVG(dropoff_ts - pickup_ts) AS average_ride_duration
FROM ride_requests

--How many rides were accepted by a driver?
SELECT COUNT(*) AS number_of_accepted_requests
FROM ride_requests
WHERE accept_ts IS NOT NULL

--How many rides did we successfully collect payments and how much was collected?
SELECT charge_status, COUNT(*), SUM(purchase_amount_usd)
FROM transactions
	GROUP BY 1

--How many ride requests happened on each platform?
SELECT platform, COUNT(*) AS number_of_requests
FROM ride_requests AS r
	JOIN signups AS s
  	ON r.user_id = s.user_id
  JOIN app_downloads AS a
	  ON a.app_download_key = s.session_id
	GROUP BY 1   

--What is the drop-off from users signing up to users requesting a ride?
WITH t1 AS (SELECT 'Sign up' AS step, COUNT(*)
FROM signups
union
SELECT 'Request' AS step, COUNT(DISTINCT user_id)
FROM ride_requests)
SELECT step, count, lag(count, 1) OVER (),  (count - lag(count, 1) OVER ())/ CAST(count AS FLOAT) AS drop_off
FROM t1

--Number of users requesting and completing a ride
SELECT COUNT(DISTINCT user_id) AS number_of_users_requesting_ride, 
	COUNT(DISTINCT 
        CASE 
        WHEN cancel_ts IS NOT NULL 
        THEN user_id 
        END) AS number_of_users_completing_ride
FROM ride_requests
